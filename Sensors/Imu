//DO NOT USE
//ACTIVATES EMERGENCY STOP

package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;

//In Configuration:
//control Hub:
//I2C Port 0

@Disabled
@TeleOp(group = "Primary") //change grp(?)

public class Imu extends LinearOpMode {

    private BNO055IMU imu; //use I2C port 0 on control hub; remove expansion hub imu

    private double imuX = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES).firstAngle;
    private double imuY = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES).secondAngle;
    private double imuZ = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES).thirdAngle;


    @Override
    public void runOpMode() throws InterruptedException {
        initHardware();
        while (!isStarted()) {
            imuTelemetry();
        }
        waitForStart();
        while (opModeIsActive()) {
            imuTelemetry();
        }

    }

    public void initHardware() {
        //all motors and servos here as usual
        initImu();
    }

    public void initImu() {
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        parameters.calibrationDataFile = "BND055IMUCalibration.json";
        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);
    }

    public void imuTelemetry() {
        //comments are for directional reference in terms of airplane principle axes
        //reverse x (neg, pos)
        telemetry.addData("Pitch-X", "%.2f", imuX); //USB ports to servo ports
        telemetry.addData("Roll-Y", "%.2f", imuY); //Motor ports to sensor ports
        telemetry.addData("Yaw-Z", "%.2f", imuZ); //Top to bottom
        telemetry.update();
    }


}
