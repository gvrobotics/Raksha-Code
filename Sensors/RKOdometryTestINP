package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@Autonomous(name = "Odometry Test 2")
public class RKOdometryTestINP extends LinearOpMode {

    public DcMotor FR, FL, BR, BL;
    public DcMotor EL, ER, EA;

    @Override
    public void runOpMode() {

        // hardware initialization
        FR = hardwareMap.get(DcMotor.class, "front_right_motor");
        FL = hardwareMap.get(DcMotor.class, "front_left_motor");
        BR = hardwareMap.get(DcMotor.class, "back_right_motor");
        BL = hardwareMap.get(DcMotor.class, "back_left_motor");

        BR.setDirection(DcMotorSimple.Direction.REVERSE);
        BL.setDirection(DcMotorSimple.Direction.FORWARD);
        FR.setDirection(DcMotorSimple.Direction.REVERSE);
        FL.setDirection(DcMotorSimple.Direction.FORWARD);

        BR.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        BL.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        FR.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        FL.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        // run wheels without encoders because encoders will be used for odometry
        BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BR.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BL.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FR.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FL.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        // motor connection to odometry encoders
        EL = BL;
        ER = BR;
        EA = FR;

        telemetry.addData("Status", "Initialized");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {
            odometry();

            // odometry telemetry
            telemetry.addData("X (cm)", pos.x);
            telemetry.addData("Y (cm)", pos.y);
            telemetry.addData("Heading (rad)", pos.h);
            telemetry.update();

            // Example usage of autonomous parameters (distance and power)
            moveRobotInches(12.0, 0.5); //move 12 inches
        }
    }

    // Conversion constants
    final static double L = 20.12; // distance between encoder 1 and 2 (cm)
    final static double B = 11.5; // distance between midpoint of encoder 1 and 2 and 3
    final static double R = 3.0; // wheel radius (cm)
    final static double N = 8192; // encoder ticks per revolution, REV Encoder
    final static double CPT = 2 * Math.PI * R / N;  // cm per tick (distance traveled)

    // Keeping track of positions
    private int CRP = 0; // current right position
    private int CLP = 0; // current left position
    private int CAP = 0; // current aux position

    private int ORP = 0; // old right position
    private int OLP = 0; // old left position
    private int OAP = 0; // old aux position

    // Odometry
    public XyhVector StartPosition = new XyhVector(213, 102, Math.toRadians(-174));
    public XyhVector pos = new XyhVector(StartPosition.x, StartPosition.y, StartPosition.h);

    // Reset drive encoders
    public void resetDriveEncoders() {
        BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BR.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BL.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FR.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FL.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    }

    // Odometry method
    public void odometry() {
        ORP = CRP;
        OLP = CLP;
        OAP = CAP;

        CRP = -ER.getCurrentPosition();
        CLP = EL.getCurrentPosition();
        CAP = EA.getCurrentPosition();

        int dn1 = CLP - OLP;
        int dn2 = CRP - ORP;
        int dn3 = CAP - OAP;

        double dtheta = CPT * ((dn2 - dn1) / (L));
        double dx = CPT * ((dn1 + dn2) / 2.0);
        double dy = CPT * ((dn3) - ((dn2 - dn1) * B / L));

        double theta = pos.h + (dtheta / 2.0);
        pos.x += dx * Math.cos(theta) - dy * Math.sin(theta);
        pos.y += dx * Math.sin(theta) + dy * Math.cos(theta);
        pos.h += dtheta;
    }

    // Method to convert inches to encoder ticks
    public int inchesToTicks(double inches) {
        return (int) (inches / CPT); // Convert inches to encoder ticks
    }

    // Method to move the robot for a specified distance (in inches) at a given power level
    public void moveRobotInches(double inches, double power) {
        int targetTicks = inchesToTicks(inches);

        // Reset encoders before moving
        resetDriveEncoders();

        // Set the target positions
        FR.setTargetPosition(targetTicks);
        FL.setTargetPosition(targetTicks);
        BR.setTargetPosition(targetTicks);
        BL.setTargetPosition(targetTicks);

        // Set the motors to run to the target positions
        FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        // Set the power for the motors
        FR.setPower(power);
        FL.setPower(power);
        BR.setPower(power);
        BL.setPower(power);

        // Wait until the robot reaches the target position
        while (opModeIsActive() && (FR.isBusy() && FL.isBusy() && BR.isBusy() && BL.isBusy())) {
            telemetry.addData("Moving", "Targeting %d inches", inches);
            telemetry.update();
        }

        // Stop all motors after reaching the target
        FR.setPower(0);
        FL.setPower(0);
        BR.setPower(0);
        BL.setPower(0);
    }

    // XyhVector class to keep track of position and heading
    public class XyhVector {
        public double x, y, h;

        public XyhVector(double x, double y, double h) {
            this.x = x;
            this.y = y;
            this.h = h;
        }
    }
}
